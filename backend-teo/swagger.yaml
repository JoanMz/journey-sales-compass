openapi: 3.0.0
info:
  title: Medical Appointments API
  description: API for managing medical appointments and related entities
  version: 1.0.0
servers:
  - url: http://localhost:3000/v1
    description: Main API server
paths:
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  
  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      summary: Delete user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

  /scheduling:
    get:
      summary: Get all appointments
      tags:
        - Scheduling
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
        - name: date
          in: query
          schema:
            type: string
            format: date
        - name: doctorId
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            enum: [asignado, confirmado]
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scheduling'
    post:
      summary: Create a new appointment
      tags:
        - Scheduling
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchedulingInput'
      responses:
        '201':
          description: Created appointment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scheduling'
  
  /scheduling/{id}:
    get:
      summary: Get appointment by ID
      tags:
        - Scheduling
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Appointment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scheduling'
        '404':
          description: Appointment not found
    put:
      summary: Update appointment
      tags:
        - Scheduling
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchedulingInput'
      responses:
        '200':
          description: Updated appointment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scheduling'
        '404':
          description: Appointment not found
    delete:
      summary: Delete appointment
      tags:
        - Scheduling
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Appointment deleted
        '404':
          description: Appointment not found
  
  /doctors:
    get:
      summary: Get all doctors
      tags:
        - Doctors
      parameters:
        - name: specialtyId
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: List of doctors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Doctor'
    post:
      summary: Create a new doctor
      tags:
        - Doctors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoctorInput'
      responses:
        '201':
          description: Created doctor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
  
  /doctors/{id}:
    get:
      summary: Get doctor by ID
      tags:
        - Doctors
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Doctor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '404':
          description: Doctor not found
  
  /services:
    get:
      summary: Get all services
      tags:
        - Services
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [cita, procedimiento]
      responses:
        '200':
          description: List of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
  
  /services/{id}:
    get:
      summary: Get service by ID
      tags:
        - Services
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Service details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: Service not found
  
  /eps:
    get:
      summary: Get all EPS entities
      tags:
        - EPS
      responses:
        '200':
          description: List of EPS entities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EPS'
  
  /headquarters:
    get:
      summary: Get all headquarters
      tags:
        - Headquarters
      responses:
        '200':
          description: List of headquarters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Headquarters'
  
  /authorizations:
    get:
      summary: Get authorizations by user ID
      tags:
        - Authorizations
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of authorizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Authorization'
    post:
      summary: Create a new authorization
      tags:
        - Authorizations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationInput'
      responses:
        '201':
          description: Created authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'

  /activities:
    get:
      summary: Get all activities
      tags:
        - Activities
      parameters:
        - name: serviceId
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: List of activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        fullName:
          type: string
        documentTypeId:
          type: integer
        documentNumber:
          type: string
        telephoneNumber:
          type: string
        epsId:
          type: integer
        headquartersId:
          type: integer
        birthday:
          type: string
          format: date
        issueDate:
          type: string
          format: date

    UserInput:
      type: object
      required:
        - fullName
        - documentTypeId
        - documentNumber
        - epsId
      properties:
        fullName:
          type: string
        documentTypeId:
          type: integer
        documentNumber:
          type: string
        telephoneNumber:
          type: string
        epsId:
          type: integer
        headquartersId:
          type: integer
        birthday:
          type: string
          format: date
        issueDate:
          type: string
          format: date

    Scheduling:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        parameterization:
          type: string
          enum: [schedule, view, reschedule, delete]
        serviceType:
          type: integer
        userId:
          type: integer
        appointmentDate:
          type: string
          format: date
        appointmentTime:
          type: string
          format: time
        responsiblePhysicianId:
          type: integer
        creationDate:
          type: string
          format: date-time
          readOnly: true
        status:
          type: string
          enum: [asignado, confirmado]

    SchedulingInput:
      type: object
      required:
        - serviceType
        - userId
        - appointmentDate
        - appointmentTime
        - responsiblePhysicianId
      properties:
        parameterization:
          type: string
          enum: [schedule, view, reschedule, delete]
        serviceType:
          type: integer
        userId:
          type: integer
        appointmentDate:
          type: string
          format: date
        appointmentTime:
          type: string
          format: time
        responsiblePhysicianId:
          type: integer
        status:
          type: string
          enum: [asignado, confirmado]
          default: asignado

    Doctor:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        code:
          type: string
        specialty1:
          type: integer
        specialty2:
          type: integer
        specialty3:
          type: integer

    DoctorInput:
      type: object
      required:
        - name
        - code
        - specialty1
      properties:
        name:
          type: string
        code:
          type: string
        specialty1:
          type: integer
        specialty2:
          type: integer
        specialty3:
          type: integer

    Service:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        code:
          type: string
        type:
          type: string
          enum: [cita, procedimiento]

    EPS:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        entityType:
          type: string
        code:
          type: string

    Headquarters:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        code:
          type: string
        name:
          type: string
        address:
          type: string

    Authorization:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        authorizationNumber:
          type: string
        userId:
          type: integer

    AuthorizationInput:
      type: object
      required:
        - authorizationNumber
        - userId
      properties:
        authorizationNumber:
          type: string
        userId:
          type: integer

    Activity:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        ipsServiceCode:
          type: string
        duration:
          type: integer
        relatedContractDescriptionId:
          type: integer
        code:
          type: string
        name:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []